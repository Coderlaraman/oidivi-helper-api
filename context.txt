# API Integration Guide for Frontend Developers
This document provides comprehensive information for frontend developers working on a Next.js project to integrate with the OiDiVi Helper API. It covers interfaces, API communication patterns, authentication flows, and response formats.

## Table of Contents
1. API Response Format
2. Authentication
   - User Authentication
   - Admin Authentication
3. TypeScript Interfaces
4. API Service Implementation
5. Authentication Implementation
## API Response Format
All API responses follow a consistent format defined by the ApiResponseTrait :

```typescript
interface ApiResponse<T> {
  success: boolean;
  message: string;
  data?: T;
  errors?: any;
}
 ```

### Success Response Example:
```json
{
  "success": true,
  "message": "Operation successful",
  "data": { ... }
}
 ```
```

### Error Response Example:
```json
{
  "success": false,
  "message": "An error occurred",
  "errors": { ... }
}
 ```
```

## Authentication
The API supports two authentication flows: one for regular users and one for administrators.

### User Authentication Registration
- Endpoint : POST /api/v1/user/auth/register
- Request Body :
  ```typescript
  interface UserRegisterRequest {
    name: string;
    email: string;
    password: string;
    password_confirmation: string;
    accepted_terms: boolean;
    address: string;
    phone: string;
    zip_code: string;
    latitude: number;
    longitude: number;
  }
   ```
  ```
- Response : Returns a token and user data Login
- Endpoint : POST /api/v1/user/auth/login
- Request Body :
  ```typescript
  interface UserLoginRequest {
    email: string;
    password: string;
  }
   ```
  ```
- Response : Returns a token and user data Email Verification
- Endpoint : POST /api/v1/user/auth/email/verification-notification
- Headers : Requires authentication token
- Response : Confirmation message
- Verification Link : GET /api/v1/user/auth/email/verify/{id}/{hash}
- Response : Confirmation of email verification Logout
- Endpoint : POST /api/v1/user/auth/logout
- Headers : Requires authentication token
- Response : Confirmation message
### Admin Authentication Login
- Endpoint : POST /api/v1/admin/auth/login
- Request Body :
  ```typescript
  interface AdminLoginRequest {
    email: string;
    password: string;
  }
   ```
  ```
- Response : Returns a token and admin user data Get Current Admin
- Endpoint : GET /api/v1/admin/auth/me
- Headers : Requires authentication token
- Response : Admin user data Logout
- Endpoint : POST /api/v1/admin/auth/logout
- Headers : Requires authentication token
- Response : Confirmation message
## TypeScript Interfaces
### User Interfaces
```typescript
interface User {
  id: number;
  name: string;
  email: string;
  accepted_terms: boolean;
  is_active: boolean;
  phone: string;
  address: string;
  zip_code: string;
  latitude: number;
  longitude: number;
  profile_photo_url: string | null;
  profile_video_url: string | null;
  created_at: string;
  updated_at: string;
  roles: string[];
  skills?: Skill[];
}

interface Skill {
  id: number;
  name: string;
  categories: string[];
}

interface UserAuthResponse {
  token: string;
  user: User;
}
 ```
```

### Admin Interfaces
```typescript
interface Admin {
  id: number;
  name: string;
  email: string;
  accepted_terms: boolean;
  is_active: boolean;
  phone: string;
  address: string;
  zip_code: string;
  latitude: number;
  longitude: number;
  profile_photo_url: string | null;
  profile_video_url: string | null;
  created_at: string;
  updated_at: string;
  roles: string[];
}

interface AdminAuthResponse {
  token: string;
  user: Admin;
  roles: string[];
}
 ```
```

## API Service Implementation
Here's a recommended implementation for API services in your Next.js project:

```typescript
// api/axios.ts
import axios from 'axios';

const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000/api';

const axiosInstance = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
  },
});

// Add a request interceptor to include the auth token
axiosInstance.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// Add a response interceptor to handle common errors
axiosInstance.interceptors.response.use(
  (response) => response,
  (error) => {
    // Handle 401 Unauthorized errors
    if (error.response && error.response.status === 401) {
      localStorage.removeItem('token');
      localStorage.removeItem('user');
      // Redirect to login page if needed
      if (typeof window !== 'undefined') {
        window.location.href = '/login';
      }
    }
    return Promise.reject(error);
  }
);

export default axiosInstance;
 ```
```

```typescript
// api/auth.service.ts
import axios from './axios';
import { ApiResponse, UserLoginRequest, UserRegisterRequest, UserAuthResponse, AdminLoginRequest, AdminAuthResponse } from '../types';

export const AuthService = {
  // User authentication
  registerUser: async (userData: UserRegisterRequest): Promise<ApiResponse<UserAuthResponse>> => {
    const response = await axios.post<ApiResponse<UserAuthResponse>>('/v1/user/auth/register', userData);
    return response.data;
  },

  loginUser: async (credentials: UserLoginRequest): Promise<ApiResponse<UserAuthResponse>> => {
    const response = await axios.post<ApiResponse<UserAuthResponse>>('/v1/user/auth/login', credentials);
    return response.data;
  },

  logoutUser: async (): Promise<ApiResponse<null>> => {
    const response = await axios.post<ApiResponse<null>>('/v1/user/auth/logout');
    return response.data;
  },

  sendVerificationEmail: async (): Promise<ApiResponse<null>> => {
    const response = await axios.post<ApiResponse<null>>('/v1/user/auth/email/verification-notification');
    return response.data;
  },

  // Admin authentication
  loginAdmin: async (credentials: AdminLoginRequest): Promise<ApiResponse<AdminAuthResponse>> => {
    const response = await axios.post<ApiResponse<AdminAuthResponse>>('/v1/admin/auth/login', credentials);
    return response.data;
  },

  getAdminProfile: async (): Promise<ApiResponse<Admin>> => {
    const response = await axios.get<ApiResponse<Admin>>('/v1/admin/auth/me');
    return response.data;
  },

  logoutAdmin: async (): Promise<ApiResponse<null>> => {
    const response = await axios.post<ApiResponse<null>>('/v1/admin/auth/logout');
    return response.data;
  },
};
 ```
```

## Authentication Implementation
### Authentication Context
```typescript
// contexts/AuthContext.tsx
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { User, Admin } from '../types';
import { AuthService } from '../api/auth.service';

type AuthUser = User | Admin | null;

interface AuthContextType {
  user: AuthUser;
  isAdmin: boolean;
  isAuthenticated: boolean;
  loading: boolean;
  login: (email: string, password: string, isAdmin?: boolean) => Promise<void>;
  register: (userData: any) => Promise<void>;
  logout: () => Promise<void>;
  sendVerificationEmail: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<AuthUser>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Check if user is already logged in
    const storedUser = localStorage.getItem('user');
    const token = localStorage.getItem('token');
    
    if (storedUser && token) {
      setUser(JSON.parse(storedUser));
    }
    
    setLoading(false);
  }, []);

  const login = async (email: string, password: string, isAdmin = false) => {
    try {
      setLoading(true);
      
      if (isAdmin) {
        const response = await AuthService.loginAdmin({ email, password });
        if (response.success && response.data) {
          localStorage.setItem('token', response.data.token);
          localStorage.setItem('user', JSON.stringify(response.data.user));
          setUser(response.data.user);
        }
      } else {
        const response = await AuthService.loginUser({ email, password });
        if (response.success && response.data) {
          localStorage.setItem('token', response.data.token);
          localStorage.setItem('user', JSON.stringify(response.data.user));
          setUser(response.data.user);
        }
      }
    } catch (error) {
      console.error('Login error:', error);
      throw error;
    } finally {
      setLoading(false);
    }
  };

  const register = async (userData: any) => {
    try {
      setLoading(true);
      const response = await AuthService.registerUser(userData);
      
      if (response.success && response.data) {
        localStorage.setItem('token', response.data.token);
        localStorage.setItem('user', JSON.stringify(response.data.user));
        setUser(response.data.user);
      }
    } catch (error) {
      console.error('Registration error:', error);
      throw error;
    } finally {
      setLoading(false);
    }
  };

  const logout = async () => {
    try {
      setLoading(true);
      
      // Determine if user is admin
      const isAdmin = user?.roles?.includes('admin');
      
      if (isAdmin) {
        await AuthService.logoutAdmin();
      } else {
        await AuthService.logoutUser();
      }
      
      localStorage.removeItem('token');
      localStorage.removeItem('user');
      setUser(null);
    } catch (error) {
      console.error('Logout error:', error);
    } finally {
      setLoading(false);
    }
  };

  const sendVerificationEmail = async () => {
    try {
      await AuthService.sendVerificationEmail();
    } catch (error) {
      console.error('Error sending verification email:', error);
      throw error;
    }
  };

  const isAdmin = !!user?.roles?.includes('admin');
  const isAuthenticated = !!user;

  return (
    <AuthContext.Provider
      value={{
        user,
        isAdmin,
        isAuthenticated,
        loading,
        login,
        register,
        logout,
        sendVerificationEmail,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};
 ```
```

### Protected Routes
```typescript
// components/ProtectedRoute.tsx
import { useRouter } from 'next/router';
import { useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';

interface ProtectedRouteProps {
  children: React.ReactNode;
  adminOnly?: boolean;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ 
  children, 
  adminOnly = false 
}) => {
  const { isAuthenticated, isAdmin, loading } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (!loading) {
      if (!isAuthenticated) {
        router.push('/login');
      } else if (adminOnly && !isAdmin) {
        router.push('/unauthorized');
      }
    }
  }, [isAuthenticated, isAdmin, loading, adminOnly, router]);

  if (loading) {
    return <div>Loading...</div>;
  }

  if (!isAuthenticated) {
    return null;
  }

  if (adminOnly && !isAdmin) {
    return null;
  }

  return <>{children}</>;
};

export default ProtectedRoute;
 ```
```

### Usage Example
```tsx
// pages/admin/dashboard.tsx
import ProtectedRoute from '../../components/ProtectedRoute';
import AdminDashboard from '../../components/AdminDashboard';

const AdminDashboardPage = () => {
  return (
    <ProtectedRoute adminOnly>
      <AdminDashboard />
    </ProtectedRoute>
  );
};

export default AdminDashboardPage;
 ```
```

```tsx
// pages/user/profile.tsx
import ProtectedRoute from '../../components/ProtectedRoute';
import UserProfile from '../../components/UserProfile';

const UserProfilePage = () => {
  return (
    <ProtectedRoute>
      <UserProfile />
    </ProtectedRoute>
  );
};

export default UserProfilePage;
 ```
```

This comprehensive guide should provide you with all the necessary information to implement authentication and API communication in this project.